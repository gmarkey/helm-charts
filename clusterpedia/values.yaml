## Default values for charts.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## @param global clusterpedia global config
global:
  ## @param global.imageRegistry Global Docker image registry
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  imagePullSecrets: []
  ## @param global.postgresql.auth define the auth info.
  ## TODO Must set the global auth of postgresql to take effect.
  postgresql:
    ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
    ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
    ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
    ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
    ##
    auth:
      postgresPassword: "dangerous0"
      username: ""
      password: ""
      database: "clusterpedia"

## @param dbInstallMode "internal" and "external" are provided
## "internal" means automatic Database installation, default mysql
## "external" means to install the database yourself, must specify the database connection parameters
storageInstallMode: "internal"
## @param database Select which database backend Clusterpedia will use. Can be 'postgresql' or 'mysql'
##
database: postgresql
## @param installCRDs define flag whether to install CRD resources
##
installCRDs: false
## @param commonLabels Add labels to all the deployed resources (sub-charts are not considered). Evaluated as a template
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param global.persistence.matchNode define the nodeAffinity of pv.
## if defined, will create the pv on the node
persistenceMatchNode: ""
## @param config of clusterpedia log
log:
  slowThreshold: 100ms

## @param external define the auth param of external database
## if set the storageInstallMode to "external", the param must be set.
external:
  ## @param auth.host for a custom host
  ##
  host: ""
  ## @param auth.port for a custom port
  ##
  port: 
  ## @param auth.user Name for a custom user
  ##
  user: ""
  ## @param auth.password Password for a custom password
  ##
  password: ""
  ## @param auth.database Name for a custom database
  ##
  database: ""


## clusterpedia apiserver config
apiServer:
  ## @param apiServer.labels
  labels: {}
  ## @param apiServer.replicaCount target replicas
  replicaCount: 1
  ## @param apiServer.podAnnotations
  podAnnotations: {}
  ## @param apiServer.podLabels
  podLabels: {}
  ## @param image.registry kpanda controllerManager image registry
  ## @param image.repository kpanda controllerManager image repository
  ## @param image.tag kpanda controllerManager image tag (immutable tags are recommended)
  ## @param image.pullPolicy kpanda controllerManager image pull policy
  ## @param image.pullSecrets Specify docker-registry secret names as an array
  ##
  image:
    registry: ghcr.io
    repository: clusterpedia-io/clusterpedia/apiserver
    tag: v0.1.0
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param apiServer.resources
  resources: {}
    # If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  ## @param controllerManager.nodeSelector
  nodeSelector: {}
  ## @param controllerManager.affinity
  affinity: {}
  ## @param controllerManager.tolerations
  ## @param apiServer.tolerations
  tolerations:
     - key: node-role.kubernetes.io/master
       operator: Exists

## clustersynchro manager config
clustersynchroManager:
  ## @param clustersynchroManager.labels
  labels: {}
  ## @param clustersynchroManager.replicaCount target replicas
  replicaCount: 1
  ## @param clustersynchroManager.podAnnotations
  podAnnotations: {}
  ## @param clustersynchroManager.podLabels
  podLabels: {}
  ## @param image.registry kpanda controllerManager image registry
  ## @param image.repository kpanda controllerManager image repository
  ## @param image.tag kpanda controllerManager image tag (immutable tags are recommended)
  ## @param image.pullPolicy kpanda controllerManager image pull policy
  ## @param image.pullSecrets Specify docker-registry secret names as an array
  ##
  image:
    registry: ghcr.io
    repository: clusterpedia-io/clusterpedia/clustersynchro-manager
    tag: v0.1.0
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param clustersynchroManager.resources
  resources: {}
    # If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  ## @param clustersynchroManager.nodeSelector
  nodeSelector: {}
  ## @param clustersynchroManager.affinity
  affinity: {}
  ## @param clustersynchroManager.tolerations
  tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists

## @section PostgreSQL Parameters
##
## PostgreSQL properties
##
postgresql:
  ## @param postgresql.enabled Deploy the PostgreSQL sub-chart
  ##
  enabled: true
  ## Properties for using an existing PostgreSQL installation
  ## @param postgresql.image.registry PostgreSQL image registry
  ## @param postgresql.image.repository PostgreSQL image repository
  ## @param postgresql.image.tag PostgreSQL image tag (immutable tags are recommended)
  ## @param postgresql.image.pullPolicy PostgreSQL image pull policy
  ## @param postgresql.image.pullSecrets Specify image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 11.15.0-debian-10-r14
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## PostgreSQL Primary persistence configuration
  ##
  persistence:
    ## @param primary.persistence.enabled Enable PostgreSQL Primary data persistence using PVC
    ##
    enabled: true
    ## @param primary.persistence.size PVC Storage Request for PostgreSQL volume
    ##
    size: 10Gi

## @section mysql Parameters
##
## mysql properties
##
mysql:
  ## @param enabled Enable mysql
  enabled: false
  ## Properties for using an existing mysql installation
  ## @param mysql.image.registry mysql image registry
  ## @param mysql.image.repository mysql image repository
  ## @param mysql.image.tag mysql image tag (immutable tags are recommended)
  ## @param mysql.image.pullPolicy mysql image pull policy
  ## @param mysql.image.pullSecrets Specify image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/mysql
    tag: 8.0.28-debian-10-r23
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    ##
    rootPassword: "dangerous0"
    ## @param auth.database Name for a custom database to create
    ##
    database: clusterpedia
    ## @param auth.username Name for a custom user to create
    ##
    username: ""
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: ""
  ## Enable persistence using Persistent Volume Claims
  ##
  persistence:
    ## @param primary.persistence.enabled Enable persistence on MySQL primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
    ##
    enabled: true
    ## @param primary.persistence.size MySQL primary persistent volume size
    ##
    size: 10Gi